"""
Django settings for open2help project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path

from cryptography.fernet import Fernet
import hashlib

import netifaces                  # network programming
from argon2 import PasswordHasher # Argon2 hasher

from open2help.encrypt_env import get_fernet, get_content, encrypt, decrypt

"""
The following key is to decrypt the .env file:

NOTE: it does not need to be stored securely as it simply adds a superficial 
level of security during app non-runtime

To change key, please execute get_fernet() and replace existent key
"""
key = b'wl5CNUsE7fCJ8YA_q9j6ZDiSE8SKzfVh4a4tFZrgAdg='
cipher_suite = Fernet(key)

# decrypt .env file
try:
    decrypt(cipher_suite)
    print("[SUCCESS] STATUS: decrypted .env file")
except: 
    print("[FAIL] STATUS: .env file already decrypted, aborting")

# Build path for persistent environment variables
env_path='.env.encrypted'
load_dotenv(dotenv_path=env_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Key kept in .env
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'main.apps.MainConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'open2help.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'open2help.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
       'ENGINE': 'django.db.backends.mysql', 
       'NAME': 'open2help',
       'USER': 'admin',
       'PASSWORD': os.getenv('DB_PASSWORD'),
       'HOST': os.getenv('DB_HOST'),
       'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Password hashers
# Utilizing Argon2 for equal difficulty in custom hardware computation versus a CPU
# Using v(20.1.0)
# https://docs.djangoproject.com/en/4.2/topics/auth/passwords/

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es-es'
TIME_ZONE = 'Europe/Madrid'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "main.CustomUser"

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
MEDIA_URL = "/media/"

LOGIN_REDIRECT_URL = "index"

"""
# Encode password
email_host_password = os.getenv('EMAIL_HOST_PASSWORD')
encoded_password = email_host_password.encode('utf-8')

# Hash the password using SHA256
hashed_password = hashlib.sha256(encoded_password).hexdigest()

# Fernet cipher suite using Fernet key
ENCRYPTION_KEY = os.getenv('FERNET_KEY')
cipher_suite = Fernet(ENCRYPTION_KEY)

# Encrypting hashed Fernet
encrypted_password = cipher_suite.encrypt(hashed_password)

# Decrypted hashed password
decrypted_password = cipher_suite.decrypt(encrypted_password)

# Compare hashed passwords for verification
if hashed_password == hashed_decrypted_password:
    print("[SUCCESS] STATUS: password verification for email host successful")
    EMAIL_HOST_PASSWORD = hashed_decrypted_password
else:
    print("[FAILED] STATUS: password verification for email host failed")


[Alternative w/out SHA256 hashing]

key = Fernet.generate_key()
cipher_suite=Fernet(key)
encoded_text = cipher_suite.encrypt(b'***************')
decrypted_text= cipher_suite.decrypt(encoded_text)
password = decrypted_text.decode('utf-8')
"""

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "open2help.notificaciones@immune.institute"
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

EMAIL_MENTOR_SUBJECT = "Confirmación de registro open2help"

EMAIL_MENTEE_SUBJECT = "Confirmación de registro open2help"

EMAIL_ACEPTADO_SUBJECT = "Tu solicitud ha sido aceptada"
EMAIL_DENEGADO_SUBJECT = "Tu solicitud ha sido rechazada"
EMAIL_RECOMENDADO_SUBJECT = "El estado de tu solicitud ha cambiado"

EMAIL_PETITION_SUBJECT = "Solicitud de mentorización open2help"

# IP addresses are running
# To avoid connection rejection
def ip_addresses():
    ip_list = []
    for interface in netifaces.interfaces():
        addrs = netifaces.ifaddresses(interface)
        for i in (netifaces.AF_INET, netifaces.AF_INET6):
            if i in addrs:
                ip_list.append(addrs[i][0]['addr'])

    # returns list of allowed connection IPs
    return ip_list

# ALLOWED_HOSTS = ip_addresses()
ALLOWED_HOSTS = ['34.245.174.227', '52.30.5.31', 'www.open2help.com', 'open2help.com']

# encrypt .env.encrypt file contents after runtime
try:
    encrypt(cipher_suite)
    print("[SUCCESS] STATUS: encrypted .env file after settings.py runtime")
except:
    print("[FAILED] STATUS: failed to encrypt .env after runtime")
